/* eslint-disable no-useless-escape */
/* eslint-disable no-undef */
/*
 * Copyright 2023 lspriv. All Rights Reserved.
 * Distributed under MIT license.
 * See File LICENSE for detail or copy at https://opensource.org/licenses/MIT
 * @Description: 面板过渡
 * @Author: lspriv
 * @LastEditTime: 2024-09-11 13:24:17
 */

/**
 * 更新非当前面板垂直方向偏移
 * @param instance
 * @param {'week' | 'month' | 'schedule'} view 视图
 */
var refreshIncurrentOffset = function (view, instance) {
  var panels = instance.selectAllComponents('.wc__panel-container--incurrent');
  for (var i = 0; i < panels.length; i++) {
    var panel = panels[i];
    var offset = view === 'week' ? panel.getDataset().offset : 0;
    panel.setStyle({
      transition: 'unset',
      transform: 'translateY(' + -offset + 'px)'
    });
  }
};

/**
 * @param {'week' | 'month' | 'schedule'} view 视图
 * @param {{ min?: number; main?: number; max?: number; }} mark 数据
 * @param instance
 * @param {boolean | string} transition
 */
var toView = function (view, mark, instance, transition = true) {
  var height = view === 'week' ? mark.min : view === 'month' ? mark.main : mark.max;
  transition = transition === true ? 'all .28s ease' : transition || 'unset';

  /** 容器高度 */
  instance.selectComponent('#panel').setStyle({
    transition: transition,
    height: height + 'px'
  });

  /** 当前面板 */
  var panel = instance.selectComponent('.wc__panel-container--current');
  /** 当前面板垂直方向偏移 */
  var offset = view === 'week' ? panel.getDataset().offset : 0;
  /** 面板样式 */
  panel.setStyle({
    transition: transition,
    transform: 'translateY(' + -offset + 'px)'
  });

  /** 更新非当前面板垂直方向偏移 */
  refreshIncurrentOffset(view, instance);
};

var setCurrPanelSchedule = function (instance, opacity, transition = 'unset', all = false) {
  var selector = all ? '' : '.wc__panel-container--current ';
  selector += '.wc__panel-schedules';
  var schedules = instance.selectAllComponents(selector);
  for (var i = 0; i < schedules.length; i++) {
    schedules[i].setStyle({
      transition: transition,
      opacity: opacity
    });
  }
};

var TOUCH_CHECK_PASS = 1 << 0;
var TOUCH_CHECK_FAIL = 1 << 1;

var showNextWeekRow = function (instance) {
  var rows = instance.selectAllComponents('.wc__panel-week--next');
  for (var i = 0; i < rows.length; i++) {
    rows[i].addClass('wc__panel-week--show');
  }
};

var removeNextWeekRowCls = function (instance) {
  var rows = instance.selectAllComponents('.wc__panel-week--show');
  for (var i = 0; i < rows.length; i++) {
    rows[i].removeClass('wc__panel-week--show');
  }
};

/** 手指触摸面板动作开始 */
var touchStart = function (e, instance) {
  var mark = e.mark;
  var state = instance.getState();
  if (!mark.gesture) return;
  /** 起始位置 */
  state.y = e.changedTouches[0].pageY;
  /** 日历底部 bar 的转角 */
  state.deg = 0;
  /** 记录上一次动作数据 */
  state.lastTime = e.timeStamp;
  state.lastX = e.changedTouches[0].pageX;
  state.lastY = state.y;
  /** 入角检查入角 */
  state.check = 0;
  if (mark.view === 'week') {
    state.currentHeight = mark.min;
    showNextWeekRow(instance);
  }
  if (mark.view === 'month') state.currentHeight = mark.main;
  if (mark.view === 'schedule') state.currentHeight = mark.max;
};

/** 手指触摸面板后移动 */
var touchMove = function (e, instance) {
  var mark = e.mark;
  if (!mark.gesture) return;
  var state = instance.getState();
  if (state.check & TOUCH_CHECK_FAIL) return;

  /** 入角小于 45 度，无效动作 */
  if (!state.check) {
    const dx = Math.abs(e.changedTouches[0].pageX - state.lastX);
    const dy = Math.abs(e.changedTouches[0].pageY - state.lastY);
    if (dx > dy /** / Math.tan(45) */) {
      state.check = TOUCH_CHECK_FAIL;
      return;
    } else {
      state.check = TOUCH_CHECK_PASS;
    }
  }

  var deltaY = e.changedTouches[0].pageY - state.y;

  state.vy = (e.changedTouches[0].pageY - state.lastY) / (e.timeStamp - state.time);
  state.lastY = e.changedTouches[0].pageY;
  state.time = e.timeStamp;

  /**
   * 日历容器高度
   */
  var height = Math.floor(Math.min(mark.dragMax, Math.max(mark.min, state.currentHeight + (deltaY * 4) / 5)));

  /**
   * 触摸时的高度不能等于触摸结束后的最终高度，是为了有效触发容器的transitionend事件
   */
  height =
    height == mark.min || height == mark.main || height == mark.max ? (deltaY < 0 ? height - 1 : height + 1) : height;

  /** 容器高度 */
  instance.selectComponent('#panel').setStyle({
    transition: 'unset',
    height: height + 'px'
  });

  /** 当前面板 */
  var panel = instance.selectComponent('.wc__panel-container--current');
  var offset = panel.getDataset().offset;
  /** 当前面板垂直方向偏移 */
  var panelOffset = height >= mark.main ? 0 : (offset * (mark.main - height)) / (mark.main - mark.min);

  /** 面板样式 */
  panel.setStyle({
    transition: 'unset',
    transform: 'translateY(' + -panelOffset + 'px)'
  });

  /** 计算控制条的角度 */
  const accmulator = deltaY > 0 ? '0.5' : '-0.5';
  const accmulation = +accmulator + state.deg;
  const deg = Math.max(-20, Math.min(accmulation, 20));
  state.deg = deg;

  /** 底部控制条样式 */
  instance.selectComponent('#control_1').setStyle({
    transition: 'unset',
    transform: 'rotate(' + deg + 'deg)'
  });
  instance.selectComponent('#control_2').setStyle({
    transition: 'unset',
    transform: 'rotate(' + -deg + 'deg)'
  });

  /** 计算左上角视图控制的位置 */
  var translateX = Math.max(0, Math.min(60, ((mark.main - height) * 60) / (mark.main - mark.min)));
  instance.selectComponent('#view_bar').setStyle({
    transition: 'unset',
    'background-position': translateX + 'rpx 0'
  });

  /** 计算日程透明度  */
  if (height > mark.main) {
    var opacity = Math.max(0, Math.min(1, (height - mark.main) / (mark.max - mark.main)));
    setCurrPanelSchedule(instance, opacity, 'unset', true);
  }
};

/** 手指触摸面板动作结束 */
var touchEnd = function (e, instance) {
  var mark = e.mark;
  if (!mark.gesture) return;
  var state = instance.getState();
  if (!state.check || state.check & TOUCH_CHECK_FAIL) return;
  const deltaY = e.changedTouches[0].pageY - state.y;

  /** 计算容器高度 */
  var height = Math.min(mark.dragMax, Math.max(mark.min, state.currentHeight + deltaY));
  /** 临界高度 */
  var unitHeight = mark.min;

  var view;
  if (mark.view === 'week') {
    view = deltaY > unitHeight ? 'month' : 'week';
  } else if (mark.view === 'schedule') {
    view = deltaY > -unitHeight ? 'schedule' : 'month';
  } else {
    view = deltaY < -unitHeight ? 'week' : deltaY > unitHeight ? 'schedule' : 'month';
  }

  const toMin = view === 'week';
  const toMax = view === 'schedule';

  const finalHeight = toMin ? mark.min : toMax ? mark.max : mark.main;
  const ms = Math.min(300, Math.abs((finalHeight - height) / state.vy));

  const transition = ms < 160 ? 'cubic-bezier(0.77, 1.36, 0.82, 1)' : 'cubic-bezier(0.61, 1, 0.88, 1)';

  toView(view, mark, instance, 'all .3s ' + transition);

  /** 底部控制条样式 */
  instance.selectComponent('#control_1').setStyle({
    transition: 'all .3s ease',
    transform: 'rotate(0deg)'
  });
  instance.selectComponent('#control_2').setStyle({
    transition: 'all .3s ease',
    transform: 'rotate(0deg)'
  });

  var translateX = toMin ? 'var(--wc-operator-side)' : 0;
  instance.selectComponent('#view_bar').setStyle({
    transition: 'all .3s ease',
    'background-position': translateX + ' 0'
  });

  /** 计算日程透明度  */
  var opacity = toMax ? 1 : 0;
  setCurrPanelSchedule(instance, opacity, 'all .3s ease');

  if (view === 'week') removeNextWeekRowCls(instance);

  instance.callMethod('refreshView', { view: toMin ? 1 : toMax ? 4 : 2 });
};

/**
 * 更新面板垂直方向偏移
 * @param {boolean} change 是否更新面板偏移
 */
var offsetChange = function (change, _, owner, instance) {
  var view = instance.getDataset().view;
  if (view === 'week' && change) {
    var panels = owner.selectAllComponents('.wc__panel-container');
    for (var i = 0; i < panels.length; i++) {
      var panel = panels[i];
      var offset = panel.getDataset().offset;

      panel.setStyle({
        transition: 'unset',
        transform: 'translateY(' + -offset + 'px)'
      });
    }
  }
};

/** 视图样式类更新 */
var updateViewCls = function (view, instance) {
  var x = view === 'week' ? 'var(--wc-operator-side)' : 0;
  instance.selectComponent('#view_bar').setStyle({
    'background-position': x + ' 0'
  });
};

/**
 * 处理视图更新
 * @param {'week' | 'month' | 'schedule'} view 视图
 */
var viewChange = function (view, old, owner) {
  if (view && view !== old) {
    var panel = owner.selectComponent('.wc');
    var cls = 'wc--' + view;
    if (!panel.hasClass(cls)) {
      if (panel.hasClass('wc--week')) panel.removeClass('wc--week');
      if (panel.hasClass('wc--month')) panel.removeClass('wc--month');
      if (panel.hasClass('wc--schedule')) panel.removeClass('wc--schedule');
      panel.addClass(cls);
    }
    updateViewCls(view, owner);
  }
};

/** 视图切换 */
var toggleView = function (e, instance) {
  var mark = e.mark;

  var _view = mark.view === 'week' ? 'month' : 'week';
  var toWeek = _view === 'week';
  var viewState = toWeek ? 1 : 2;

  toView(_view, mark, instance);
  updateViewCls(_view, instance);
  instance.callMethod('refreshView', { view: viewState });
};

var updateAnnualCls = function (opacity, _, owner) {
  if (opacity != null) {
    if (opacity) {
      owner.selectComponent('.wc__header').addClass('wc__header--hidden');
      owner.selectComponent('.wc__b').addClass('wc__b--hidden');
    } else {
      owner.selectComponent('.wc__header').removeClass('wc__header--hidden');
      owner.selectComponent('.wc__b').removeClass('wc__b--hidden');
    }
  }
};

var initViewChange = function (view, old, owner, instance) {
  if (view) {
    const dataset = instance.getDataset();
    toView(view, dataset, owner, false);
    const opacity = view === 'schedule' ? 1 : 0;
    setCurrPanelSchedule(owner, opacity, 'unset');
  }
};

var transViewChange = function (view, old, owner, instance) {
  if (view) {
    const dataset = instance.getDataset();
    toView(view, dataset, owner);
    viewChange(view, old, owner);
    owner.callMethod('refreshView', { view: view === 'week' ? 1 : view === 'month' ? 2 : 4 });
  }
};

var normalizeRgb = function (rgb) {
  var color = rgb.match(getRegExp('[0-9]+%?', 'g'));
  if (!color || color.length < 3) return null;
  var percentReg = getRegExp('%$');
  var r = percentReg.test(color[0]) ? parseFloat(color[0]) / 100 : +color[0];
  var g = percentReg.test(color[1]) ? parseFloat(color[1]) / 100 : +color[1];
  var b = percentReg.test(color[2]) ? parseFloat(color[2]) / 100 : +color[2];
  var a = color[3] ? (percentReg.test(color[3]) ? parseFloat(color[3]) / 100 : +color[3]) : 1;

  r = Math.min(255, r < 1 ? Math.round(r * 255) : r);
  g = Math.min(255, g < 1 ? Math.round(g * 255) : g);
  b = Math.min(255, b < 1 ? Math.round(b * 255) : b);

  return [r, g, b, a];
};

var hexToRgb = function (hex) {
  hex = hex.replace(getRegExp('^#'), '');
  var a = 1;
  // 如果是缩写形式，如 #03F
  if (hex.length === 3) {
    hex = hex.replace(getRegExp('([a-f0-9])', 'gi'), '$1$1');
  }

  if (hex.length === 8) {
    hex = hex.slice(0, 6);
    a = Math.round((parseInt(hex.slice(6, 8), 16) * 100) / 0xff) / 100;
  }

  const bigint = parseInt(hex, 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;

  return [r, g, b, a];
};

/**
 * 容器 css 设置了 filter: invert(1) 取反，Color = 255 - Cr
 * 文本使用了 mix-blend-mode: difference; 差值
 * 所以，根据 blend difference 公式 Cr = (1 - ab) * Cs + ab * | Cb - Cs |
 * 又背景色一致，只是透明度 ab 不同，所以 Cr = (1 - ab) * Cs，其中背景透明度常设 0.1
 * 则需要设置主色调 Cs = (255 - Color) / (1 - ab) = (255 - Color) / 0.9
 */
var invertColor = function (color) {
  var r = Math.min(255, parseInt(((255 - color[0]) * 10) / 9));
  var g = Math.min(255, parseInt(((255 - color[1]) * 10) / 9));
  var b = Math.min(255, parseInt(((255 - color[2]) * 10) / 9));
  return [r, g, b, color[3] ? color[3] : 1];
};

var getStyle = function (style, key) {
  var value = style.match(getRegExp('(?<=' + key + ' *:)([^;]+)'));
  if (!value || !value.length || !value[0]) return null;
  return value[0].replace(getRegExp('[\\r\\n]+', 'g'), '').trim();
};

var styleChange = function (view, _, owner) {
  var primary = getStyle(view, '--wc-primary');
  var light = getStyle(view, '--wc-opt-color-light') || primary;
  var dark = getStyle(view, '--wc-opt-color-dark') || primary;
  var rgbReg = getRegExp('^rgba?');
  var styles = {};

  if (light) {
    if (rgbReg.test(light)) {
      light = normalizeRgb(light);
    } else {
      light = hexToRgb(light);
    }
    light = invertColor(light);
    styles['--wc-op-color-light'] = 'rgba(' + light.join(',') + ')';
    styles['--wc-op-bg-light'] = 'rgba(' + light.slice(0, 3).join(',') + ',0.1' + ')';
  }

  if (dark) {
    if (rgbReg.test(dark)) {
      dark = normalizeRgb(dark);
    } else {
      dark = hexToRgb(dark);
    }
    dark = invertColor(dark);
    styles['--wc-op-color-dark'] = 'rgba(' + dark.join(',') + ')';
    styles['--wc-op-bg-dark'] = 'rgba(' + dark.slice(0, 3).join(',') + ',0.1' + ')';
  }

  owner.selectComponent('.wc').setStyle(styles);

  if (primary) {
    var primary2 = getStyle(view, '--wc-primary-2');
    if (!primary2) {
      if (rgbReg.test(primary)) {
        primary = normalizeRgb(primary);
      } else {
        primary = hexToRgb(primary);
      }
      owner.selectComponent('.wcc').setStyle({
        '--wc-primary-2': 'rgba(' + primary.slice(0, 3).join(',') + ',0.1' + ')'
      });
    }
  }
};

module.exports = {
  touchStart,
  touchMove,
  touchEnd,
  toggleView,
  viewChange,
  offsetChange,
  updateAnnualCls,
  initViewChange,
  transViewChange,
  styleChange
};
